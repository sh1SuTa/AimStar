
#define _CRT_SECURE_NO_WARNINGS
#include "Cheats.h"
#include "Offsets.h"
#include "Resources/Language.h"
#include "Utils/Initial/Init.h"
#include "Utils/XorStr.h"
#include "Utils/ConfigSaver.hpp"
#include <chrono>
#include <filesystem>
#include <iomanip>
#include <KnownFolders.h>
#include <ShlObj.h>
#include <stdio.h>
#ifndef USERMODE
#include "Utils/kdm/kdmapper.hpp"
#endif

using namespace Lang;
//#include "Utils/curl/curl.h"
//#include "Utils/json/json.hpp"
using namespace std;
/*
Contributors:
	Shinyaluvs,
	Nx0Ri,
	ByteCorum,
	Skarbor,
	PedroGoncalves,
	KeysIsCool,
	Kenny,
	Cr1ppl3,
	Tairitsu,
	sh1pi,
	toepas,
	djsacred,
	tokinaa,
	faster_bbc,
	vsantos1,
	5mmod,
	gScream,
	Hazetick,
	styx,
	user1232,
	TaKaStuKi.sen
*/

namespace fs = filesystem;
bool otp = false;
//string fileName;



void Exit()
{
	system("pause");
	exit(0);
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);

void RandomTitle()
{
	constexpr int length = 25;
	const auto characters = TEXT("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`-=~!@#$%^&*()_+,./;'[]|{}:?甲乙丙丁戊己庚辛壬癸子丑寅卯辰巳午未申酉戌亥");
	TCHAR title[length + 1]{};

	for (int j = 0; j != length; j++)
	{
		title[j] += characters[rand() % 95];
	}

	SetConsoleTitle(title);
}
#ifndef USERMODE

/* F:\LuvIstEmpty\Bimstar\x64\Release\Driver.sys (2024/8/10 1:23:29)
   起始位置(h): 00000000, 结束位置(h): 00001FFF, 长度(h): 00002000 */

unsigned char Driver[8192] = {
	0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE8, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,
	0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,
	0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72,
	0x6F, 0x67, 0x72, 0x61, 0x6D, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x4D,
	0x33, 0x33, 0x35, 0x31, 0x41, 0x4E, 0x21, 0x21, 0x2E, 0x0D, 0x0D, 0x0A,
	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0x16, 0xDD, 0xF5,
	0x8B, 0x77, 0xB3, 0xA6, 0x8B, 0x77, 0xB3, 0xA6, 0x8B, 0x77, 0xB3, 0xA6,
	0x8B, 0x77, 0xB3, 0xA6, 0x8A, 0x77, 0xB3, 0xA6, 0xC0, 0x0F, 0xB0, 0xA7,
	0x8F, 0x77, 0xB3, 0xA6, 0xC0, 0x0F, 0xB7, 0xA7, 0x8A, 0x77, 0xB3, 0xA6,
	0xC0, 0x0F, 0xB2, 0xA7, 0x88, 0x77, 0xB3, 0xA6, 0x8B, 0x77, 0xB2, 0xA6,
	0x9F, 0x77, 0xB3, 0xA6, 0x64, 0xF5, 0xBA, 0xA7, 0x8A, 0x77, 0xB3, 0xA6,
	0x64, 0xF5, 0xB1, 0xA7, 0x8A, 0x77, 0xB3, 0xA6, 0x52, 0x69, 0x63, 0x68,
	0x8B, 0x77, 0xB3, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x04, 0x00,
	0x57, 0x50, 0xB6, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xF0, 0x00, 0x22, 0x20, 0x0B, 0x02, 0x0E, 0x27, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x19, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x50, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x3C, 0xC0, 0x00, 0x00,
	0x01, 0x00, 0x60, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xF8, 0x24, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
	0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x21, 0x00, 0x00,
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
	0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0xC0, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0xCC, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0xDC, 0x49, 0x89, 0x53, 0x10, 0x53,
	0x56, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x50, 0x45, 0x33,
	0xFF, 0x48, 0x83, 0xE1, 0xF0, 0x48, 0x8B, 0xC2, 0x4D, 0x89, 0x7B, 0x08,
	0x48, 0xC1, 0xE8, 0x27, 0x48, 0x8B, 0xF2, 0x25, 0xFF, 0x01, 0x00, 0x00,
	0x48, 0xC1, 0xEE, 0x0C, 0x48, 0x8B, 0xFA, 0x4D, 0x89, 0x7B, 0x18, 0x48,
	0xC1, 0xEF, 0x15, 0x48, 0x8B, 0xDA, 0x48, 0xC1, 0xEB, 0x1E, 0x4C, 0x8B,
	0xF2, 0x4C, 0x8D, 0x14, 0xC1, 0x41, 0x81, 0xE6, 0xFF, 0x0F, 0x00, 0x00,
	0x81, 0xE6, 0xFF, 0x01, 0x00, 0x00, 0x81, 0xE7, 0xFF, 0x01, 0x00, 0x00,
	0x81, 0xE3, 0xFF, 0x01, 0x00, 0x00, 0x45, 0x8B, 0xCF, 0x4D, 0x85, 0xD2,
	0x74, 0x2D, 0x49, 0x8D, 0x43, 0x08, 0x49, 0x8B, 0xD2, 0x45, 0x8D, 0x4F,
	0x01, 0x49, 0x89, 0x43, 0xA8, 0x45, 0x8D, 0x47, 0x08, 0x49, 0x8D, 0x4B,
	0x18, 0xFF, 0x15, 0xC1, 0x0F, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x88,
	0x00, 0x00, 0x00, 0x4C, 0x8B, 0x8C, 0x24, 0x90, 0x00, 0x00, 0x00, 0x41,
	0x0F, 0xB6, 0xC1, 0x48, 0x89, 0x6C, 0x24, 0x48, 0xF6, 0xD0, 0xA8, 0x01,
	0x0F, 0x85, 0x69, 0x01, 0x00, 0x00, 0x48, 0xBD, 0x00, 0xF0, 0xFF, 0xFF,
	0x0F, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xBC, 0x24, 0x98, 0x00, 0x00, 0x00,
	0x4C, 0x23, 0xCD, 0x4D, 0x8B, 0xC7, 0x49, 0x8D, 0x04, 0xD9, 0x48, 0x85,
	0xC0, 0x74, 0x38, 0x41, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8C,
	0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4C, 0x24, 0x20, 0x48, 0x8B,
	0xD0, 0x48, 0x8D, 0x8C, 0x24, 0x98, 0x00, 0x00, 0x00, 0x45, 0x8D, 0x41,
	0x07, 0xFF, 0x15, 0x55, 0x0F, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x88,
	0x00, 0x00, 0x00, 0x4C, 0x8B, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, 0x41,
	0x0F, 0xB6, 0xC8, 0xF6, 0xD1, 0xF6, 0xC1, 0x01, 0x0F, 0x85, 0x01, 0x01,
	0x00, 0x00, 0x45, 0x84, 0xC0, 0x79, 0x27, 0x48, 0xB8, 0x00, 0x00, 0x00,
	0xC0, 0xFF, 0xFF, 0x0F, 0x00, 0x81, 0xE2, 0xFF, 0xFF, 0xFF, 0x3F, 0x49,
	0x23, 0xC0, 0x48, 0x03, 0xC2, 0x48, 0x8B, 0x6C, 0x24, 0x48, 0x48, 0x83,
	0xC4, 0x50, 0x41, 0x5F, 0x41, 0x5E, 0x5F, 0x5E, 0x5B, 0xC3, 0x4C, 0x23,
	0xC5, 0x49, 0x8B, 0xC7, 0x48, 0x89, 0x44, 0x24, 0x30, 0x49, 0x8D, 0x0C,
	0xF8, 0x48, 0x85, 0xC9, 0x74, 0x32, 0x41, 0xB9, 0x01, 0x00, 0x00, 0x00,
	0x48, 0x8D, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xD1, 0x48,
	0x89, 0x44, 0x24, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x30, 0x45, 0x8D, 0x41,
	0x07, 0xFF, 0x15, 0xD1, 0x0E, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x88,
	0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x30, 0x0F, 0xB6, 0xC8, 0xF6,
	0xD1, 0xF6, 0xC1, 0x01, 0x0F, 0x85, 0x81, 0x00, 0x00, 0x00, 0x84, 0xC0,
	0x79, 0x1D, 0x48, 0x23, 0xC5, 0x81, 0xE2, 0xFF, 0xFF, 0x1F, 0x00, 0x48,
	0x03, 0xC2, 0x48, 0x8B, 0x6C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x50, 0x41,
	0x5F, 0x41, 0x5E, 0x5F, 0x5E, 0x5B, 0xC3, 0x48, 0x23, 0xC5, 0x49, 0x8B,
	0xCF, 0x48, 0x89, 0x8C, 0x24, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x14,
	0xF0, 0x48, 0x85, 0xD2, 0x74, 0x2D, 0x41, 0xB9, 0x01, 0x00, 0x00, 0x00,
	0x48, 0x8D, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24,
	0x88, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x8D, 0x41,
	0x07, 0xFF, 0x15, 0x59, 0x0E, 0x00, 0x00, 0x48, 0x8B, 0x8C, 0x24, 0x88,
	0x00, 0x00, 0x00, 0x48, 0x23, 0xCD, 0x49, 0x8D, 0x04, 0x0E, 0x49, 0x0F,
	0x44, 0xC7, 0x48, 0x8B, 0x6C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x50, 0x41,
	0x5F, 0x41, 0x5E, 0x5F, 0x5E, 0x5B, 0xC3, 0x48, 0x8B, 0x6C, 0x24, 0x48,
	0x33, 0xC0, 0x48, 0x83, 0xC4, 0x50, 0x41, 0x5F, 0x41, 0x5E, 0x5F, 0x5E,
	0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x89, 0x5C, 0x24, 0x10, 0x48, 0x89, 0x6C, 0x24, 0x18, 0x56, 0x48,
	0x83, 0xEC, 0x60, 0x48, 0x8B, 0xEA, 0x48, 0x8B, 0xD9, 0xFF, 0x15, 0xBD,
	0x0D, 0x00, 0x00, 0x48, 0x8B, 0xF0, 0x48, 0x85, 0xC0, 0x75, 0x13, 0x48,
	0x8B, 0x5C, 0x24, 0x78, 0x48, 0x8B, 0xAC, 0x24, 0x80, 0x00, 0x00, 0x00,
	0x48, 0x83, 0xC4, 0x60, 0x5E, 0xC3, 0x48, 0x8D, 0x54, 0x24, 0x30, 0x48,
	0x89, 0x7C, 0x24, 0x70, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0xBF, 0x0D, 0x00,
	0x00, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x85, 0xF6, 0x74, 0x73, 0x48, 0x8B,
	0x5E, 0x10, 0x48, 0x83, 0xC6, 0x10, 0x48, 0x3B, 0xDE, 0x74, 0x66, 0x90,
	0x0F, 0x10, 0x43, 0x58, 0x4C, 0x8D, 0x4C, 0x24, 0x20, 0x33, 0xD2, 0x4C,
	0x8D, 0x05, 0xE6, 0x0D, 0x00, 0x00, 0x33, 0xC9, 0x0F, 0x29, 0x44, 0x24,
	0x20, 0xFF, 0x15, 0x61, 0x0D, 0x00, 0x00, 0x4C, 0x8B, 0x4B, 0x30, 0x4C,
	0x8D, 0x05, 0xE6, 0x0D, 0x00, 0x00, 0x33, 0xD2, 0x33, 0xC9, 0xFF, 0x15,
	0x4C, 0x0D, 0x00, 0x00, 0x44, 0x8B, 0x4B, 0x40, 0x4C, 0x8D, 0x05, 0xE9,
	0x0D, 0x00, 0x00, 0x33, 0xD2, 0x33, 0xC9, 0xFF, 0x15, 0x37, 0x0D, 0x00,
	0x00, 0x41, 0xB0, 0x01, 0x48, 0x8D, 0x4B, 0x58, 0x48, 0x8B, 0xD5, 0xFF,
	0x15, 0x17, 0x0D, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x2D, 0x48, 0x8B, 0x1B,
	0x48, 0x3B, 0xDE, 0x75, 0x9B, 0x48, 0x8D, 0x4C, 0x24, 0x30, 0xFF, 0x15,
	0x78, 0x0D, 0x00, 0x00, 0x33, 0xC0, 0x48, 0x8B, 0x7C, 0x24, 0x70, 0x48,
	0x8B, 0x5C, 0x24, 0x78, 0x48, 0x8B, 0xAC, 0x24, 0x80, 0x00, 0x00, 0x00,
	0x48, 0x83, 0xC4, 0x60, 0x5E, 0xC3, 0x48, 0x8B, 0x5B, 0x30, 0x48, 0x8D,
	0x4C, 0x24, 0x30, 0xFF, 0x15, 0x4F, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0xC3,
	0xEB, 0xD4, 0xCC, 0xCC, 0x40, 0x53, 0x56, 0x48, 0x81, 0xEC, 0x58, 0x01,
	0x00, 0x00, 0x8B, 0x01, 0x33, 0xF6, 0x48, 0x89, 0xB4, 0x24, 0x70, 0x01,
	0x00, 0x00, 0x48, 0x8B, 0xD9, 0x85, 0xC0, 0x75, 0x0C, 0xB0, 0x01, 0x48,
	0x81, 0xC4, 0x58, 0x01, 0x00, 0x00, 0x5E, 0x5B, 0xC3, 0x48, 0x89, 0xAC,
	0x24, 0x78, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x94, 0x24, 0x70, 0x01, 0x00,
	0x00, 0x48, 0x89, 0xBC, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xC8,
	0x4C, 0x89, 0xA4, 0x24, 0x50, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xB4, 0x24,
	0x48, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xBC, 0x24, 0x40, 0x01, 0x00, 0x00,
	0xFF, 0x15, 0xAE, 0x0C, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x85, 0x19, 0x01,
	0x00, 0x00, 0x48, 0x8B, 0x7B, 0x18, 0x4C, 0x8B, 0x63, 0x10, 0x4C, 0x8B,
	0x7B, 0x08, 0x48, 0x8B, 0x9C, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x85,
	0xDB, 0x75, 0x05, 0x48, 0x8B, 0xEE, 0xEB, 0x6C, 0x48, 0x8B, 0x6B, 0x28,
	0x48, 0x85, 0xED, 0x75, 0x63, 0x33, 0xD2, 0x48, 0x8D, 0x4C, 0x24, 0x20,
	0x41, 0xB8, 0x14, 0x01, 0x00, 0x00, 0xE8, 0x2D, 0x09, 0x00, 0x00, 0x48,
	0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x15, 0x72, 0x0C, 0x00, 0x00, 0x8B, 0x44,
	0x24, 0x2C, 0x3D, 0x61, 0x4A, 0x00, 0x00, 0x77, 0x2A, 0x74, 0x28, 0x2D,
	0xEE, 0x42, 0x00, 0x00, 0x74, 0x1A, 0x2D, 0x75, 0x02, 0x00, 0x00, 0x74,
	0x13, 0x2D, 0x57, 0x02, 0x00, 0x00, 0x74, 0x05, 0x83, 0xF8, 0x01, 0x75,
	0x0E, 0xB8, 0x80, 0x02, 0x00, 0x00, 0xEB, 0x0C, 0xB8, 0x78, 0x02, 0x00,
	0x00, 0xEB, 0x05, 0xB8, 0x88, 0x03, 0x00, 0x00, 0x48, 0x8B, 0x2C, 0x18,
	0x48, 0x8B, 0x9C, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x85, 0xFF, 0x0F,
	0x84, 0x79, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x00, 0x4A, 0x8D, 0x14, 0x3E,
	0x48, 0x8B, 0xCD, 0xE8, 0xC4, 0xFB, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74,
	0x72, 0x48, 0x8B, 0xC8, 0xBB, 0x00, 0x10, 0x00, 0x00, 0x81, 0xE1, 0xFF,
	0x0F, 0x00, 0x00, 0x41, 0xB8, 0x04, 0x00, 0x00, 0x00, 0x48, 0x2B, 0xD9,
	0x48, 0x8B, 0xC8, 0x48, 0x3B, 0xDF, 0x48, 0x0F, 0x43, 0xDF, 0x48, 0x8B,
	0xD3, 0xFF, 0x15, 0xED, 0x0B, 0x00, 0x00, 0x4C, 0x8B, 0xF0, 0x48, 0x85,
	0xC0, 0x74, 0x2B, 0x4A, 0x8D, 0x14, 0x26, 0x4C, 0x8B, 0xC3, 0x48, 0x8B,
	0xC8, 0xE8, 0xBE, 0x05, 0x00, 0x00, 0x48, 0x8B, 0xD3, 0x49, 0x8B, 0xCE,
	0xFF, 0x15, 0x9A, 0x0B, 0x00, 0x00, 0x48, 0x2B, 0xFB, 0x48, 0x03, 0xF3,
	0x48, 0x85, 0xDB, 0x74, 0x05, 0x48, 0x85, 0xFF, 0x75, 0x92, 0x48, 0x8B,
	0x9C, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0x69,
	0x0B, 0x00, 0x00, 0xB0, 0x01, 0xEB, 0x02, 0x32, 0xC0, 0x4C, 0x8B, 0xB4,
	0x24, 0x48, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xA4, 0x24, 0x50, 0x01, 0x00,
	0x00, 0x48, 0x8B, 0xBC, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xAC,
	0x24, 0x78, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xBC, 0x24, 0x40, 0x01, 0x00,
	0x00, 0x48, 0x81, 0xC4, 0x58, 0x01, 0x00, 0x00, 0x5E, 0x5B, 0xC3, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x55, 0x53, 0x57,
	0x48, 0x8D, 0x6C, 0x24, 0x80, 0x48, 0x81, 0xEC, 0x80, 0x01, 0x00, 0x00,
	0x8B, 0x41, 0x20, 0x48, 0x8B, 0xF9, 0x3D, 0x01, 0x00, 0x00, 0x80, 0x0F,
	0x84, 0x18, 0x01, 0x00, 0x00, 0x3D, 0x02, 0x00, 0x00, 0x80, 0x0F, 0x84,
	0xA5, 0x00, 0x00, 0x00, 0x3D, 0x03, 0x00, 0x00, 0x80, 0x0F, 0x84, 0x8B,
	0x00, 0x00, 0x00, 0x3D, 0x04, 0x00, 0x00, 0x80, 0x74, 0x59, 0x3D, 0x05,
	0x00, 0x00, 0x80, 0x0F, 0x85, 0xFF, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x33,
	0xDB, 0x48, 0x89, 0x9D, 0xA0, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x84,
	0xC8, 0x00, 0x00, 0x00, 0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0, 0x00, 0x00,
	0x00, 0xFF, 0x15, 0xE5, 0x0A, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x85, 0xB1,
	0x00, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x96, 0x0B, 0x00, 0x00, 0x48, 0x8D,
	0x4C, 0x24, 0x30, 0xFF, 0x15, 0xAB, 0x0A, 0x00, 0x00, 0x0F, 0x28, 0x44,
	0x24, 0x30, 0x48, 0x8D, 0x54, 0x24, 0x40, 0x66, 0x0F, 0x7F, 0x44, 0x24,
	0x40, 0xEB, 0x7E, 0x8B, 0x01, 0x33, 0xDB, 0x48, 0x89, 0x9D, 0xA0, 0x00,
	0x00, 0x00, 0x85, 0xC0, 0x74, 0x7E, 0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0,
	0x00, 0x00, 0x00, 0xFF, 0x15, 0x9B, 0x0A, 0x00, 0x00, 0x85, 0xC0, 0x75,
	0x6B, 0x48, 0x8D, 0x15, 0x38, 0x0B, 0x00, 0x00, 0xEB, 0x38, 0x48, 0x81,
	0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xE9, 0x6F, 0xFD, 0xFF,
	0xFF, 0x8B, 0x01, 0x33, 0xDB, 0x48, 0x89, 0x9D, 0xA0, 0x00, 0x00, 0x00,
	0x85, 0xC0, 0x74, 0x44, 0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0, 0x00, 0x00,
	0x00, 0xFF, 0x15, 0x61, 0x0A, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x31, 0x48,
	0x8D, 0x15, 0xE6, 0x0A, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xFF,
	0x15, 0x2B, 0x0A, 0x00, 0x00, 0x0F, 0x28, 0x44, 0x24, 0x40, 0x48, 0x8D,
	0x54, 0x24, 0x30, 0x66, 0x0F, 0x7F, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8D,
	0xA0, 0x00, 0x00, 0x00, 0xE8, 0x1F, 0xFC, 0xFF, 0xFF, 0x48, 0x8B, 0xD8,
	0x48, 0x85, 0xDB, 0x48, 0x89, 0x5F, 0x28, 0x0F, 0x95, 0xC0, 0x48, 0x81,
	0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xC3, 0x8B, 0x01, 0x33,
	0xDB, 0x48, 0x89, 0x9D, 0xA0, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x0D,
	0xB0, 0x01, 0x48, 0x81, 0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D,
	0xC3, 0x48, 0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0, 0x00, 0x00, 0x00, 0xFF,
	0x15, 0xEB, 0x09, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x0D, 0x32, 0xC0, 0x48,
	0x81, 0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xC3, 0x48, 0x89,
	0xB4, 0x24, 0xB0, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x77, 0x18, 0x4C, 0x89,
	0xA4, 0x24, 0xB8, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0x67, 0x10, 0x4C, 0x89,
	0xB4, 0x24, 0x78, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xBC, 0x24, 0x70, 0x01,
	0x00, 0x00, 0x4C, 0x8B, 0x7F, 0x08, 0x48, 0x39, 0x9D, 0xA0, 0x00, 0x00,
	0x00, 0x75, 0x05, 0x48, 0x8B, 0xFB, 0xEB, 0x6B, 0x4C, 0x8B, 0xB5, 0xA0,
	0x00, 0x00, 0x00, 0x49, 0x8B, 0x7E, 0x28, 0x48, 0x85, 0xFF, 0x75, 0x5B,
	0x33, 0xD2, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0x41, 0xB8, 0x14, 0x01, 0x00,
	0x00, 0xE8, 0x3E, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF,
	0x15, 0x83, 0x09, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x5C, 0x3D, 0x61, 0x4A,
	0x00, 0x00, 0x77, 0x2A, 0x74, 0x28, 0x2D, 0xEE, 0x42, 0x00, 0x00, 0x74,
	0x1A, 0x2D, 0x75, 0x02, 0x00, 0x00, 0x74, 0x13, 0x2D, 0x57, 0x02, 0x00,
	0x00, 0x74, 0x05, 0x83, 0xF8, 0x01, 0x75, 0x0E, 0xB8, 0x80, 0x02, 0x00,
	0x00, 0xEB, 0x0C, 0xB8, 0x78, 0x02, 0x00, 0x00, 0xEB, 0x05, 0xB8, 0x88,
	0x03, 0x00, 0x00, 0x4A, 0x8B, 0x3C, 0x30, 0x4C, 0x8B, 0xF3, 0x48, 0x85,
	0xF6, 0x74, 0x6F, 0x4B, 0x8D, 0x14, 0x3E, 0x48, 0x8B, 0xCF, 0xE8, 0xE1,
	0xF8, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0x94, 0x00, 0x00, 0x00,
	0x48, 0x8B, 0xC8, 0x48, 0x89, 0x9D, 0xA8, 0x00, 0x00, 0x00, 0x81, 0xE1,
	0xFF, 0x0F, 0x00, 0x00, 0x48, 0x8D, 0x95, 0xA8, 0x00, 0x00, 0x00, 0x48,
	0x89, 0x54, 0x24, 0x20, 0x41, 0xB8, 0x00, 0x10, 0x00, 0x00, 0x4C, 0x2B,
	0xC1, 0x41, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x4C, 0x3B, 0xC6, 0x4B, 0x8D,
	0x0C, 0x26, 0x48, 0x8B, 0xD0, 0x4C, 0x0F, 0x43, 0xC6, 0xFF, 0x15, 0xE1,
	0x08, 0x00, 0x00, 0x48, 0x8B, 0x8D, 0xA8, 0x00, 0x00, 0x00, 0x48, 0x2B,
	0xF1, 0x4C, 0x03, 0xF1, 0x85, 0xC0, 0x75, 0x0A, 0x48, 0x85, 0xC9, 0x74,
	0x05, 0x48, 0x85, 0xF6, 0x75, 0x91, 0x48, 0x8B, 0x8D, 0xA0, 0x00, 0x00,
	0x00, 0xFF, 0x15, 0x89, 0x08, 0x00, 0x00, 0xB0, 0x01, 0x4C, 0x8B, 0xB4,
	0x24, 0x78, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xA4, 0x24, 0xB8, 0x01, 0x00,
	0x00, 0x48, 0x8B, 0xB4, 0x24, 0xB0, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xBC,
	0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x81, 0xC4, 0x80, 0x01, 0x00, 0x00,
	0x5F, 0x5B, 0x5D, 0xC3, 0xEB, 0xD3, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28,
	0x33, 0xC9, 0x48, 0x8B, 0xC2, 0x89, 0x4A, 0x30, 0x48, 0x89, 0x4A, 0x38,
	0x33, 0xD2, 0x48, 0x8B, 0xC8, 0xFF, 0x15, 0x8D, 0x08, 0x00, 0x00, 0x33,
	0xC0, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,
	0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x82, 0xB8, 0x00, 0x00,
	0x00, 0x33, 0xFF, 0x89, 0x7A, 0x30, 0x48, 0x8B, 0xDA, 0x48, 0x89, 0x7A,
	0x38, 0x83, 0x78, 0x10, 0x30, 0x72, 0x27, 0x81, 0x78, 0x18, 0xD4, 0x1D,
	0x22, 0x00, 0x75, 0x17, 0x48, 0x8B, 0x4A, 0x18, 0xE8, 0xCB, 0xFC, 0xFF,
	0xFF, 0x84, 0xC0, 0x74, 0x0A, 0x48, 0xC7, 0x43, 0x38, 0x30, 0x00, 0x00,
	0x00, 0xEB, 0x0C, 0xBF, 0x10, 0x00, 0x00, 0xC0, 0xEB, 0x05, 0xBF, 0x23,
	0x00, 0x00, 0xC0, 0x33, 0xD2, 0x89, 0x7B, 0x30, 0x48, 0x8B, 0xCB, 0xFF,
	0x15, 0x1B, 0x08, 0x00, 0x00, 0x8B, 0x43, 0x30, 0x48, 0x8B, 0x5C, 0x24,
	0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x40, 0x53, 0x48, 0x83, 0xEC, 0x60, 0x48, 0x8B, 0xD9, 0x48, 0x8D, 0x15,
	0xB0, 0x08, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xFF, 0x15, 0xA5,
	0x07, 0x00, 0x00, 0x48, 0x8D, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x41,
	0xB9, 0x22, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4C, 0x8D,
	0x44, 0x24, 0x40, 0xC6, 0x44, 0x24, 0x28, 0x00, 0x33, 0xD2, 0x48, 0x8B,
	0xCB, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x15, 0xB5,
	0x07, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x7C, 0x48, 0x8D, 0x15, 0x9A, 0x08,
	0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF, 0x15, 0x5F, 0x07, 0x00,
	0x00, 0x48, 0x8D, 0x54, 0x24, 0x40, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF,
	0x15, 0x9F, 0x07, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x56, 0x48, 0x8B, 0x84,
	0x24, 0x80, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x05, 0xA4, 0x08, 0x00, 0x00,
	0x33, 0xD2, 0x33, 0xC9, 0x83, 0x48, 0x30, 0x04, 0x48, 0x8D, 0x05, 0xCD,
	0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x43, 0x70, 0x48, 0x89, 0x83, 0x80, 0x00,
	0x00, 0x00, 0x48, 0x8D, 0x05, 0xEB, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x83,
	0xE0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,
	0x48, 0xC7, 0x43, 0x68, 0x00, 0x00, 0x00, 0x00, 0x81, 0x60, 0x30, 0x7F,
	0xFF, 0xFF, 0xFF, 0xFF, 0x15, 0xE7, 0x06, 0x00, 0x00, 0x33, 0xC0, 0x48,
	0x83, 0xC4, 0x60, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x38,
	0x48, 0x8D, 0x15, 0x5D, 0x08, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20,
	0xFF, 0x15, 0xCA, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x03, 0xFF, 0xFF,
	0xFF, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x15, 0xC8, 0x06, 0x00, 0x00,
	0x48, 0x83, 0xC4, 0x38, 0xC3, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83,
	0xEC, 0x10, 0x33, 0xC0, 0x33, 0xC9, 0x0F, 0xA2, 0x44, 0x8B, 0xC0, 0x33,
	0xC9, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x45, 0x32, 0xC9, 0x0F, 0xA2, 0x89,
	0x04, 0x24, 0x44, 0x8B, 0xD1, 0xB8, 0x07, 0x00, 0x00, 0x00, 0x89, 0x5C,
	0x24, 0x04, 0x89, 0x4C, 0x24, 0x08, 0x89, 0x54, 0x24, 0x0C, 0x44, 0x3B,
	0xC0, 0x7C, 0x24, 0x33, 0xC9, 0x45, 0x0F, 0xB6, 0xC9, 0x0F, 0xA2, 0x89,
	0x04, 0x24, 0x0F, 0xBA, 0xE3, 0x09, 0xB8, 0x02, 0x00, 0x00, 0x00, 0x89,
	0x5C, 0x24, 0x04, 0x44, 0x0F, 0x42, 0xC8, 0x89, 0x4C, 0x24, 0x08, 0x89,
	0x54, 0x24, 0x0C, 0x41, 0x0F, 0xBA, 0xE2, 0x14, 0x73, 0x26, 0x41, 0x0F,
	0xBA, 0xE2, 0x1B, 0x73, 0x1F, 0x41, 0x0F, 0xBA, 0xE2, 0x1C, 0x73, 0x18,
	0x33, 0xC9, 0x0F, 0x01, 0xD0, 0x48, 0xC1, 0xE2, 0x20, 0x48, 0x0B, 0xD0,
	0x80, 0xE2, 0x06, 0x80, 0xFA, 0x06, 0x75, 0x04, 0x41, 0x80, 0xC9, 0x04,
	0x41, 0x80, 0xC9, 0x01, 0x44, 0x88, 0x0D, 0xFD, 0x15, 0x00, 0x00, 0x33,
	0xC0, 0x48, 0x83, 0xC4, 0x10, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x8B, 0xC1, 0x49, 0x83, 0xF8, 0x08, 0x72, 0x37, 0x49, 0x83, 0xF8,
	0x10, 0x77, 0x11, 0x4C, 0x8B, 0x1A, 0x4A, 0x8B, 0x54, 0x02, 0xF8, 0x4C,
	0x89, 0x19, 0x4A, 0x89, 0x54, 0x01, 0xF8, 0xC3, 0x49, 0x83, 0xF8, 0x20,
	0x77, 0x5A, 0x0F, 0x10, 0x02, 0x42, 0x0F, 0x10, 0x4C, 0x02, 0xF0, 0x0F,
	0x11, 0x01, 0x42, 0x0F, 0x11, 0x4C, 0x01, 0xF0, 0xC3, 0x0F, 0x1F, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xC0, 0x74, 0x15, 0x48, 0x2B, 0xD1,
	0x72, 0x16, 0x44, 0x8A, 0x1C, 0x11, 0x48, 0xFF, 0xC1, 0x49, 0xFF, 0xC8,
	0x44, 0x88, 0x59, 0xFF, 0x75, 0xF0, 0xC3, 0x0F, 0x1F, 0x44, 0x00, 0x00,
	0x49, 0x03, 0xC8, 0x44, 0x8A, 0x5C, 0x11, 0xFF, 0x48, 0xFF, 0xC9, 0x49,
	0xFF, 0xC8, 0x44, 0x88, 0x19, 0x75, 0xF0, 0xC3, 0x66, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x8D, 0x1C, 0x02,
	0x48, 0x2B, 0xD1, 0x73, 0x09, 0x4C, 0x3B, 0xD9, 0x0F, 0x87, 0x6E, 0x01,
	0x00, 0x00, 0x0F, 0x10, 0x04, 0x11, 0x48, 0x83, 0xC1, 0x10, 0xF6, 0xC1,
	0x0F, 0x74, 0x12, 0x48, 0x83, 0xE1, 0xF0, 0x0F, 0x10, 0x0C, 0x11, 0x0F,
	0x11, 0x00, 0x0F, 0x28, 0xC1, 0x48, 0x83, 0xC1, 0x10, 0x4C, 0x03, 0xC0,
	0x4C, 0x2B, 0xC1, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x06, 0x74, 0x6F,
	0x49, 0x81, 0xF9, 0x00, 0x10, 0x00, 0x00, 0x0F, 0x87, 0xB3, 0x00, 0x00,
	0x00, 0x49, 0x83, 0xE0, 0x3F, 0xEB, 0x2D, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x0C, 0x11, 0x0F, 0x10, 0x54, 0x11,
	0x10, 0x0F, 0x10, 0x5C, 0x11, 0x20, 0x0F, 0x10, 0x64, 0x11, 0x30, 0x0F,
	0x29, 0x41, 0xF0, 0x48, 0x83, 0xC1, 0x40, 0x49, 0xFF, 0xC9, 0x0F, 0x29,
	0x49, 0xC0, 0x0F, 0x29, 0x51, 0xD0, 0x0F, 0x29, 0x59, 0xE0, 0x0F, 0x28,
	0xC4, 0x75, 0xD1, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x04, 0x74, 0x19,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x29, 0x41, 0xF0,
	0x0F, 0x10, 0x04, 0x11, 0x48, 0x83, 0xC1, 0x10, 0x49, 0xFF, 0xC9, 0x75,
	0xEF, 0x49, 0x83, 0xE0, 0x0F, 0x74, 0x0E, 0x4E, 0x8D, 0x5C, 0x01, 0xF0,
	0x41, 0x0F, 0x10, 0x0C, 0x13, 0x41, 0x0F, 0x11, 0x0B, 0x0F, 0x29, 0x41,
	0xF0, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x06, 0x49, 0x83, 0xE0, 0x3F, 0x0F,
	0x18, 0x44, 0x11, 0x40, 0xEB, 0x2E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x90, 0x0F, 0x10, 0x0C, 0x11, 0x0F, 0x10, 0x54, 0x11,
	0x10, 0x0F, 0x10, 0x5C, 0x11, 0x20, 0x0F, 0x10, 0x64, 0x11, 0x30, 0x0F,
	0x2B, 0x41, 0xF0, 0x48, 0x83, 0xC1, 0x40, 0x0F, 0x18, 0x44, 0x11, 0x40,
	0x49, 0xFF, 0xC9, 0x0F, 0x2B, 0x49, 0xC0, 0x0F, 0x2B, 0x51, 0xD0, 0x0F,
	0x2B, 0x59, 0xE0, 0x0F, 0x28, 0xC4, 0x75, 0xCC, 0x0F, 0xAE, 0xF8, 0xE9,
	0x33, 0xFF, 0xFF, 0xFF, 0x0F, 0x1F, 0x40, 0x00, 0x49, 0x03, 0xC8, 0x0F,
	0x10, 0x44, 0x11, 0xF0, 0x48, 0x83, 0xE9, 0x10, 0x49, 0x83, 0xE8, 0x10,
	0xF6, 0xC1, 0x0F, 0x74, 0x18, 0x4C, 0x8B, 0xD9, 0x48, 0x83, 0xE1, 0xF0,
	0x0F, 0x10, 0x0C, 0x11, 0x41, 0x0F, 0x11, 0x03, 0x0F, 0x28, 0xC1, 0x4C,
	0x8B, 0xC1, 0x4C, 0x2B, 0xC0, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x06,
	0x74, 0x39, 0x49, 0x83, 0xE0, 0x3F, 0xEB, 0x04, 0x0F, 0x1F, 0x40, 0x00,
	0x0F, 0x10, 0x4C, 0x11, 0xF0, 0x0F, 0x10, 0x54, 0x11, 0xE0, 0x0F, 0x10,
	0x5C, 0x11, 0xD0, 0x0F, 0x10, 0x64, 0x11, 0xC0, 0x0F, 0x29, 0x01, 0x48,
	0x83, 0xE9, 0x40, 0x49, 0xFF, 0xC9, 0x0F, 0x29, 0x49, 0x30, 0x0F, 0x29,
	0x51, 0x20, 0x0F, 0x29, 0x59, 0x10, 0x0F, 0x28, 0xC4, 0x75, 0xD1, 0x4D,
	0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x04, 0x74, 0x19, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x29, 0x01, 0x0F, 0x10, 0x44, 0x11, 0xF0,
	0x48, 0x83, 0xE9, 0x10, 0x49, 0xFF, 0xC9, 0x75, 0xEF, 0x49, 0x83, 0xE0,
	0x0F, 0x74, 0x0F, 0x4C, 0x8B, 0xD9, 0x4D, 0x2B, 0xD8, 0x41, 0x0F, 0x10,
	0x0C, 0x13, 0x41, 0x0F, 0x11, 0x0B, 0x0F, 0x29, 0x01, 0xC3, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0xC1, 0x0F,
	0xB6, 0xD2, 0x49, 0xB9, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x49, 0x0F, 0xAF, 0xD1, 0x66, 0x48, 0x0F, 0x6E, 0xC2, 0x0F, 0x16, 0xC0,
	0x49, 0x83, 0xF8, 0x40, 0x72, 0x6E, 0xF6, 0x05, 0xD7, 0x12, 0x00, 0x00,
	0x02, 0x74, 0x0D, 0x49, 0x81, 0xF8, 0x20, 0x03, 0x00, 0x00, 0x0F, 0x83,
	0x08, 0x01, 0x00, 0x00, 0x0F, 0x11, 0x01, 0x4C, 0x03, 0xC1, 0x48, 0x83,
	0xC1, 0x10, 0x48, 0x83, 0xE1, 0xF0, 0x4C, 0x2B, 0xC1, 0x49, 0x83, 0xF8,
	0x40, 0x72, 0x47, 0x4A, 0x8D, 0x54, 0x01, 0xF0, 0x4E, 0x8D, 0x4C, 0x01,
	0xD0, 0x49, 0x83, 0xE1, 0xF0, 0x49, 0xC1, 0xE8, 0x06, 0x0F, 0x29, 0x01,
	0x0F, 0x29, 0x41, 0x10, 0x48, 0x83, 0xC1, 0x40, 0x49, 0xFF, 0xC8, 0x0F,
	0x29, 0x41, 0xE0, 0x0F, 0x29, 0x41, 0xF0, 0x75, 0xE8, 0x41, 0x0F, 0x29,
	0x01, 0x41, 0x0F, 0x29, 0x41, 0x10, 0x41, 0x0F, 0x29, 0x41, 0x20, 0x0F,
	0x11, 0x02, 0xC3, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x49, 0x83, 0xF8, 0x10,
	0x72, 0x2A, 0x4D, 0x8D, 0x4C, 0x08, 0xF0, 0x49, 0x83, 0xE0, 0x20, 0x0F,
	0x11, 0x01, 0x49, 0xD1, 0xE8, 0x41, 0x0F, 0x11, 0x01, 0x42, 0x0F, 0x11,
	0x04, 0x01, 0x49, 0xF7, 0xD8, 0x43, 0x0F, 0x11, 0x04, 0x01, 0xC3, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xF8, 0x04,
	0x72, 0x2A, 0x4D, 0x8D, 0x4C, 0x08, 0xFC, 0x49, 0x83, 0xE0, 0x08, 0x89,
	0x11, 0x49, 0xD1, 0xE8, 0x41, 0x89, 0x11, 0x42, 0x89, 0x14, 0x01, 0x49,
	0xF7, 0xD8, 0x43, 0x89, 0x14, 0x01, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xC0, 0x74,
	0x11, 0x88, 0x11, 0x4E, 0x8D, 0x4C, 0x01, 0xFE, 0x49, 0x83, 0xF8, 0x01,
	0x74, 0x04, 0x66, 0x41, 0x89, 0x11, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x57, 0xF6, 0x05, 0xB8, 0x11, 0x00, 0x00, 0x01,
	0x74, 0x32, 0x48, 0x8B, 0xF9, 0x4C, 0x03, 0xC1, 0x0F, 0x11, 0x01, 0x48,
	0x83, 0xC7, 0x40, 0x0F, 0x11, 0x41, 0x10, 0x48, 0x83, 0xE7, 0xC0, 0x0F,
	0x11, 0x41, 0x20, 0x4C, 0x2B, 0xC7, 0x0F, 0x11, 0x41, 0x30, 0x49, 0x8B,
	0xC8, 0x4C, 0x8B, 0xC8, 0x66, 0x48, 0x0F, 0x7E, 0xC0, 0xF3, 0xAA, 0x49,
	0x8B, 0xC1, 0x5F, 0xC3, 0xE8, 0x3F, 0x00, 0x00, 0x00, 0xEB, 0xC7, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x50, 0x48, 0x83, 0xEC, 0x30, 0x0F,
	0x29, 0x44, 0x24, 0x20, 0xE8, 0x9B, 0xFA, 0xFF, 0xFF, 0x0F, 0x28, 0x44,
	0x24, 0x20, 0x48, 0x83, 0xC4, 0x30, 0x58, 0x59, 0x5A, 0x41, 0x58, 0x41,
	0x59, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x25, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD4, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x25, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFA, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x12, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x36, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4E, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x7C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x8C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xB0, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC6, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5B, 0x3E, 0x5D, 0x20, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x20, 0x4E,
	0x61, 0x6D, 0x65, 0x3A, 0x20, 0x25, 0x77, 0x5A, 0x0A, 0x00, 0x00, 0x00,
	0x5B, 0x3E, 0x5D, 0x20, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x20, 0x42,
	0x61, 0x73, 0x65, 0x3A, 0x20, 0x25, 0x70, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x5B, 0x3E, 0x5D, 0x20, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x20, 0x53,
	0x69, 0x7A, 0x65, 0x3A, 0x20, 0x25, 0x64, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x63, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00,
	0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00,
	0x32, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00,
	0x69, 0x00, 0x6E, 0x00, 0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x73, 0x00,
	0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x2E, 0x00,
	0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x44, 0x00,
	0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00,
	0x41, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00,
	0x72, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00,
	0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x44, 0x00,
	0x6F, 0x00, 0x73, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00,
	0x63, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x69, 0x00,
	0x6D, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x44, 0x00,
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20, 0x5B, 0x41, 0x69, 0x6D,
	0x53, 0x74, 0x61, 0x72, 0x5D, 0x20, 0x4C, 0x4F, 0x41, 0x44, 0x20, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5C, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00,
	0x72, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x53, 0x00,
	0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00,
	0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x50, 0xB6, 0x66, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x46, 0x00, 0x00, 0x00, 0x48, 0x22, 0x00, 0x00, 0x48, 0x16, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x57, 0x50, 0xB6, 0x66, 0x00, 0x00, 0x00, 0x00,
	0x0C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x90, 0x22, 0x00, 0x00,
	0x90, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x50, 0xB6, 0x66,
	0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
	0xA4, 0x22, 0x00, 0x00, 0xA4, 0x16, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
	0x02, 0x80, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x22, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x70, 0x09, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53, 0xFE, 0x6B, 0x72, 0xC8,
	0x32, 0x0F, 0x8E, 0x4D, 0xBE, 0x89, 0x9F, 0xAD, 0x48, 0xC1, 0x3B, 0x06,
	0x01, 0x00, 0x00, 0x00, 0x46, 0x3A, 0x5C, 0x4C, 0x75, 0x76, 0x49, 0x73,
	0x74, 0x45, 0x6D, 0x70, 0x74, 0x79, 0x5C, 0x42, 0x69, 0x6D, 0x73, 0x74,
	0x61, 0x72, 0x5C, 0x78, 0x36, 0x34, 0x5C, 0x52, 0x65, 0x6C, 0x65, 0x61,
	0x73, 0x65, 0x5C, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2E, 0x70, 0x64,
	0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x47, 0x43, 0x54, 0x4C, 0x00, 0x10, 0x00, 0x00, 0x40, 0x0A, 0x00, 0x00,
	0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x1A, 0x00, 0x00, 0xC0, 0x04, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
	0x74, 0x24, 0x6D, 0x6E, 0x24, 0x32, 0x31, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x88, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35,
	0x00, 0x00, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0xA0, 0x01, 0x00, 0x00,
	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x28, 0x22, 0x00, 0x00,
	0x20, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x76,
	0x6F, 0x6C, 0x74, 0x6D, 0x64, 0x00, 0x00, 0x00, 0x48, 0x22, 0x00, 0x00,
	0x98, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A,
	0x7A, 0x7A, 0x64, 0x62, 0x67, 0x00, 0x00, 0x00, 0xE0, 0x23, 0x00, 0x00,
	0x18, 0x01, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0xF8, 0x24, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x24, 0x32, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x25, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x25, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
	0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00,
	0xA8, 0x25, 0x00, 0x00, 0x5E, 0x01, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x24, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00,
	0x10, 0x30, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x62, 0x73, 0x73,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00,
	0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0xA0, 0x08, 0x00, 0xA0, 0x54, 0x09, 0x00,
	0x12, 0x92, 0x0E, 0xF0, 0x0C, 0xE0, 0x0A, 0x70, 0x09, 0x60, 0x08, 0x30,
	0x01, 0x0F, 0x06, 0x00, 0x0F, 0x54, 0x10, 0x00, 0x0F, 0x34, 0x0F, 0x00,
	0x0F, 0xB2, 0x0B, 0x60, 0x21, 0x05, 0x02, 0x00, 0x05, 0x74, 0x0E, 0x00,
	0x30, 0x12, 0x00, 0x00, 0x6B, 0x12, 0x00, 0x00, 0xF4, 0x23, 0x00, 0x00,
	0x21, 0x00, 0x02, 0x00, 0x00, 0x74, 0x0E, 0x00, 0x30, 0x12, 0x00, 0x00,
	0x6B, 0x12, 0x00, 0x00, 0xF4, 0x23, 0x00, 0x00, 0x01, 0x5C, 0x0E, 0x00,
	0x5C, 0xF4, 0x28, 0x00, 0x54, 0xE4, 0x29, 0x00, 0x4C, 0xC4, 0x2A, 0x00,
	0x41, 0x74, 0x30, 0x00, 0x31, 0x54, 0x2F, 0x00, 0x0A, 0x01, 0x2B, 0x00,
	0x03, 0x60, 0x02, 0x30, 0x01, 0x10, 0x05, 0x00, 0x10, 0x01, 0x30, 0x00,
	0x04, 0x70, 0x03, 0x30, 0x02, 0x50, 0x00, 0x00, 0x21, 0x28, 0x08, 0x00,
	0x28, 0xF4, 0x2E, 0x00, 0x20, 0xE4, 0x2F, 0x00, 0x14, 0xC4, 0x37, 0x00,
	0x08, 0x64, 0x36, 0x00, 0xF0, 0x14, 0x00, 0x00, 0x66, 0x16, 0x00, 0x00,
	0x4C, 0x24, 0x00, 0x00, 0x21, 0x00, 0x08, 0x00, 0x00, 0xF4, 0x2E, 0x00,
	0x00, 0xE4, 0x2F, 0x00, 0x00, 0xC4, 0x37, 0x00, 0x00, 0x64, 0x36, 0x00,
	0xF0, 0x14, 0x00, 0x00, 0x66, 0x16, 0x00, 0x00, 0x4C, 0x24, 0x00, 0x00,
	0x01, 0x04, 0x01, 0x00, 0x04, 0x42, 0x00, 0x00, 0x01, 0x0A, 0x04, 0x00,
	0x0A, 0x34, 0x06, 0x00, 0x0A, 0x32, 0x06, 0x70, 0x01, 0x06, 0x02, 0x00,
	0x06, 0xB2, 0x02, 0x30, 0x01, 0x04, 0x01, 0x00, 0x04, 0x62, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x00,
	0x02, 0x06, 0x09, 0x06, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0B, 0x08, 0x00, 0x08, 0x16, 0x00, 0x06, 0x0B, 0x52, 0x07, 0x00,
	0x06, 0x10, 0x05, 0x20, 0x04, 0x80, 0x02, 0x90, 0x02, 0x06, 0x04, 0x00,
	0x02, 0x06, 0x03, 0x06, 0x06, 0x12, 0x02, 0x30, 0x20, 0x25, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x26, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA8, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x25, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xD4, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x25, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x12, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x24, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4E, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x8C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9E, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC6, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xDE, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x36, 0x08, 0x52, 0x74, 0x6C, 0x43, 0x6F, 0x6D,
	0x70, 0x61, 0x72, 0x65, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x74, 0x07, 0x50, 0x73, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x62, 0x00,
	0x71, 0x00, 0x44, 0x62, 0x67, 0x50, 0x72, 0x69, 0x6E, 0x74, 0x45, 0x78,
	0x00, 0x00, 0xCB, 0x06, 0x4F, 0x62, 0x66, 0x44, 0x65, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74,
	0x00, 0x00, 0xF1, 0x08, 0x52, 0x74, 0x6C, 0x49, 0x6E, 0x69, 0x74, 0x55,
	0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67,
	0x00, 0x00, 0x1E, 0x06, 0x4D, 0x6D, 0x55, 0x6E, 0x6D, 0x61, 0x70, 0x49,
	0x6F, 0x53, 0x70, 0x61, 0x63, 0x65, 0x00, 0x00, 0x26, 0x03, 0x49, 0x6F,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x00, 0x00, 0x70, 0x05, 0x4B, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,
	0x00, 0x00, 0xB0, 0x07, 0x50, 0x73, 0x4C, 0x6F, 0x6F, 0x6B, 0x75, 0x70,
	0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6F,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x00, 0x00, 0xC1, 0x05, 0x4D, 0x6D,
	0x43, 0x6F, 0x70, 0x79, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00, 0x00,
	0xDF, 0x08, 0x52, 0x74, 0x6C, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6F, 0x6E, 0x00, 0xEF, 0x05, 0x4D, 0x6D, 0x4D, 0x61, 0x70, 0x49,
	0x6F, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x00, 0x00, 0x23, 0x03,
	0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x00, 0x00, 0x4F, 0x04, 0x49, 0x6F, 0x66, 0x43, 0x6F, 0x6D,
	0x70, 0x6C, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x00, 0x00, 0x2F, 0x03, 0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x69, 0x63, 0x4C, 0x69, 0x6E, 0x6B,
	0x00, 0x00, 0x80, 0x05, 0x4B, 0x65, 0x55, 0x6E, 0x73, 0x74, 0x61, 0x63,
	0x6B, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6F, 0x63, 0x65,
	0x73, 0x73, 0x00, 0x00, 0x6E, 0x74, 0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C,
	0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x26, 0x12, 0x00, 0x00, 0xE0, 0x23, 0x00, 0x00,
	0x30, 0x12, 0x00, 0x00, 0x6B, 0x12, 0x00, 0x00, 0xF4, 0x23, 0x00, 0x00,
	0x6B, 0x12, 0x00, 0x00, 0x1A, 0x13, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00,
	0x1A, 0x13, 0x00, 0x00, 0x2E, 0x13, 0x00, 0x00, 0x18, 0x24, 0x00, 0x00,
	0x30, 0x13, 0x00, 0x00, 0xE7, 0x14, 0x00, 0x00, 0x2C, 0x24, 0x00, 0x00,
	0xF0, 0x14, 0x00, 0x00, 0x66, 0x16, 0x00, 0x00, 0x4C, 0x24, 0x00, 0x00,
	0x66, 0x16, 0x00, 0x00, 0xBC, 0x17, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00,
	0xBC, 0x17, 0x00, 0x00, 0xBE, 0x17, 0x00, 0x00, 0x7C, 0x24, 0x00, 0x00,
	0xC0, 0x17, 0x00, 0x00, 0xE2, 0x17, 0x00, 0x00, 0x9C, 0x24, 0x00, 0x00,
	0xF0, 0x17, 0x00, 0x00, 0x5B, 0x18, 0x00, 0x00, 0xA4, 0x24, 0x00, 0x00,
	0x60, 0x18, 0x00, 0x00, 0x31, 0x19, 0x00, 0x00, 0xB0, 0x24, 0x00, 0x00,
	0x40, 0x19, 0x00, 0x00, 0x6D, 0x19, 0x00, 0x00, 0xB8, 0x24, 0x00, 0x00,
	0x70, 0x19, 0x00, 0x00, 0x0C, 0x1A, 0x00, 0x00, 0xEC, 0x24, 0x00, 0x00,
	0x40, 0x1A, 0x00, 0x00, 0xEA, 0x1C, 0x00, 0x00, 0xC0, 0x24, 0x00, 0x00,
	0x00, 0x1D, 0x00, 0x00, 0x07, 0x1E, 0x00, 0x00, 0xC0, 0x24, 0x00, 0x00,
	0x40, 0x1E, 0x00, 0x00, 0x83, 0x1E, 0x00, 0x00, 0xC8, 0x24, 0x00, 0x00,
	0xC0, 0x1E, 0x00, 0x00, 0xE6, 0x1E, 0x00, 0x00, 0xD8, 0x24, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

size_t arraySize = sizeof(Driver) / sizeof(Driver[0]);

void createDriver() {

	ofstream outFile("ASDriver.sys", ios::binary);

	if (!outFile) {
		cerr << "Create failed" << endl;
		return;
	}

	outFile.write(reinterpret_cast<const char*>(Driver), arraySize);

	if (!outFile) {
		cerr << "Write failed" << endl;
		return;
	}

	outFile.close();
	cout << "Write success" << endl;
	return;
}

HANDLE iqvw64e_device_handle;


LONG WINAPI SimplestCrashHandler(EXCEPTION_POINTERS* ExceptionInfo)
{
	if (ExceptionInfo && ExceptionInfo->ExceptionRecord)
		Log(L"[!!] Crash at addr 0x" << ExceptionInfo->ExceptionRecord->ExceptionAddress << L" by 0x" << hex << ExceptionInfo->ExceptionRecord->ExceptionCode << endl);
	else
		Log(L"[!!] Crash" << endl);

	if (iqvw64e_device_handle)
		intel_driver::Unload(iqvw64e_device_handle);

	return EXCEPTION_EXECUTE_HANDLER;
}

bool callbackEx(ULONG64* param1, ULONG64* param2, ULONG64 allocationPtr, ULONG64 allocationSize) {
	// bool callbackEx(ULONG64* param1, ULONG64* param2, ULONG64 allocationPtr, ULONG64 allocationSize, ULONG64 mdlptr) {
	UNREFERENCED_PARAMETER(param1);
	UNREFERENCED_PARAMETER(param2);
	UNREFERENCED_PARAMETER(allocationPtr);
	UNREFERENCED_PARAMETER(allocationSize);
	// UNREFERENCED_PARAMETER(mdlptr);
	Log("[+] Callbacked" << endl);

	/*
	This callback occurs before call driver entry and
	can be usefull to pass more customized params in
	the last step of the mapping procedure since you
	know now the mapping address and other things
	*/
	return true;
}

int kdmap(const int argc, wchar_t** argv) {
	SetUnhandledExceptionFilter(SimplestCrashHandler);

	bool free = false;
	bool mdlMode = false;
	bool indPagesMode = false;
	bool passAllocationPtr = false;

	if (free) {
		Log(L"[+] Free pool memory after usage enabled" << endl);
	}

	if (mdlMode) {
		Log(L"[+] Mdl memory usage enabled" << endl);
	}

	if (indPagesMode) {
		Log(L"[+] Allocate Independent Pages mode enabled" << endl);
	}

	if (passAllocationPtr) {
		Log(L"[+] Pass Allocation Ptr as first param enabled" << endl);
	}


	const wstring driver_path = L"ASDriver.sys";//argv[drvIndex];


	iqvw64e_device_handle = intel_driver::Load();

	if (iqvw64e_device_handle == INVALID_HANDLE_VALUE) {
		return -1;
	}

	vector<uint8_t> raw_image = { 0 };
	if (!utils::ReadFileToMemory(driver_path, &raw_image)) {
		Log(L"[-] Failed to read image to memory" << endl);
		intel_driver::Unload(iqvw64e_device_handle);
		return -1;
	}

	kdmapper::AllocationMode mode = kdmapper::AllocationMode::AllocatePool;

	if (mdlMode && indPagesMode) {
		Log(L"[-] Too many allocation modes" << endl);
		intel_driver::Unload(iqvw64e_device_handle);
		return -1;
	}
	else if (mdlMode) {
		mode = kdmapper::AllocationMode::AllocateMdl;
	}
	else if (indPagesMode) {
		mode = kdmapper::AllocationMode::AllocateIndependentPages;
	}

	NTSTATUS exitCode = 0;
	if (!kdmapper::MapDriver(iqvw64e_device_handle, raw_image.data(), 0, 0, free, true, mode, passAllocationPtr, callbackEx, &exitCode)) {
		Log(L"[-] Failed to map " << driver_path << endl);
		intel_driver::Unload(iqvw64e_device_handle);
		return -1;
	}

	if (!intel_driver::Unload(iqvw64e_device_handle)) {
		Log(L"[-] Warning failed to fully unload vulnerable driver " << endl);
	}
	Log(L"[+] success" << endl);
}

#endif
//using json = nlohmann::json;


static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
	((string*)userp)->append((char*)contents, size * nmemb);
	return size * nmemb;
}



bool checkHWIDFromYAML(const string& hwid) {
	ifstream fileStream(MenuConfig::path + XorStr("\\Offsets\\offsets.yaml"));
	YAML::Node data = YAML::Load(fileStream);
	fileStream.close();

	if (!data["client_dll"]["VACManager_001"]) {
		return false;
	}

	for (const auto& item : data["client_dll"]["VACManager_001"]) {
		if (item.as<string>() == hwid) {
			return true;
		}
	}

	return false;
}

void UpdateLang()
{

	string langPath = MenuConfig::path + XorStr("\\Languages\\lang.yaml");

	if (!filesystem::exists(langPath)) {
		English();
		return;
	}
	ifstream langStream(langPath);
	YAML::Node langs = YAML::Load(langStream);
	langStream.close();

	//const_cast<char*>(langs["node"].as<string>().c_str());
	return;
}

void UpdateSteamPath() {
	
	HKEY hKey;
	wchar_t steamPath[MAX_PATH];
	DWORD bufferSize = sizeof(steamPath);


	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, L"SOFTWARE\\WOW6432Node\\Valve\\Steam", 0, KEY_READ, &hKey) == ERROR_SUCCESS) {
		if (RegQueryValueEx(hKey, L"InstallPath", nullptr, nullptr, (LPBYTE)steamPath, &bufferSize) == ERROR_SUCCESS)
			MenuConfig::SteamPath = steamPath;
		else
			MenuConfig::SteamPath = L"C:\\Program Files(x86)\\Steam";
	}
	else
		MenuConfig::SteamPath = L"C:\\Program Files(x86)\\Steam";
	return; 
}

void AntiDebugger(string Log = "") noexcept
{
	if (IsDebuggerPresent())
	{
		if (Log != "")printf((Log + "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n").c_str());
		ShowWindow(GetConsoleWindow(), false);
		exit(0);
	}
}
void Cheat()
{
#ifdef NDEBUG
	// AntiDebugger("Initialize fail");
#endif
	ImGui_ImplWin32_EnableDpiAwareness();
	if (Init::Verify::CheckWindowVersion())
	{
		Lang::GetCountry(MenuConfig::Country);
		MenuConfig::MaxFrameRate = Init::Client::getMaxFrameRate();
	}
		
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);	//Gets a standard output device handle  

	srand((unsigned)time(NULL));
	RandomTitle();
	UpdateSteamPath();
#ifdef USERMODE

	cout << XorStr("[WARN] 你正在使用Usermode版本，该版本可能被VAC检测。") << endl;
#else
	createDriver();
	kdmap(1, nullptr);
	remove("ASDriver.sys");
#endif // USERMODE
	SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);	//Set the text color to green  
	cout << R"(                                                                   
    ___    _          _____ __            
   /   |  (_)___ ___ / ___// /_____ ______
  / /| | / / __ `__ \\__ \/ __/ __ `/ ___/
 / ___ |/ / / / / / /__/ / /_/ /_/ / /    
/_/  |_/_/_/ /_/ /_/____/\__/\__,_/_/    
	)" << endl;
	printf(XorStr("%s-%s\n"), __DATE__, __TIME__);
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);

	auto ProcessStatus = ProcessMgr.Attach(XorStr("cs2.exe"));

	char documentsPath[MAX_PATH];
	if (SHGetFolderPathA(NULL, CSIDL_PERSONAL, NULL, 0, documentsPath) != S_OK) {
		cerr << XorStr("【错误】获取文档目录失败.") << endl;
		Exit();
	}
	MenuConfig::path = documentsPath;
	MenuConfig::path += XorStr("\\AimStar");
	MenuConfig::HWID = Init::Client::G();
	if (checkHWIDFromYAML(MenuConfig::HWID.substr(MenuConfig::HWID.length() - 16).c_str()))
		MenuConfig::DRM = true;
	switch (ProcessStatus) {
	case 1:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("\u3010\u9519\u8bef\u3011\u8bf7\u5148\u8fd0\u884c\u6e38\u620f\uff01") << endl;
		Exit();
	case 2:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("\u3010\u9519\u8bef\u3011\u6743\u9650\u4e0d\u8db3\uff0c\u8bf7\u4f7f\u7528\u7ba1\u7406\u5458\u8fd0\u884c.") << endl;
		Exit();
	case 3:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("\u3010\u9519\u8bef\u3011\u83b7\u53d6\u6a21\u5757\u5730\u5740\u5931\u8d25.") << endl;
		Exit();
	default:
		break;
	}

	if (!Offset::UpdateOffsets())
	{
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("\u3010\u9519\u8bef\u3011\u57fa\u5740\u66f4\u65b0\u5931\u8d25.") << endl;
		Exit();
	}

	if (!gGame.InitAddress())
	{
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("\u3010\u9519\u8bef\u3011\u65e0\u6cd5\u521d\u59cb\u5316\u5730\u5740. \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5185\u6838\u7248\uff0c\u8bf7\u786e\u4fdd\u9a71\u52a8\u5df2\u7ecf\u6b63\u786e\u52a0\u8f7d.") << endl;
		Exit();
	}

	cout << XorStr("[Game] Process ID: ") << ProcessMgr.ProcessID << endl;
	cout << XorStr("[Game] Client Address: ") << gGame.GetClientDLLAddress() << endl;

	if (fs::exists(MenuConfig::path))
	{
		cout << XorStr("[Info] Config folder connected: ") << MenuConfig::path << endl;
	}
	else
	{
		if (fs::create_directories(MenuConfig::path))
		{
			cout << XorStr("[Info] Config folder created: ") << MenuConfig::path << endl;
		}
		else
		{
			cerr << XorStr("[Info] Error: Failed to create the config directory.") << endl;
			Exit();
		}
	}

	ifstream defaultConfig(MenuConfig::path + XorStr("\\default.yml"));
	if (defaultConfig.is_open())
	{
		MenuConfig::defaultConfig = true;
		defaultConfig.close();		
	}
	// Language initialize
	UpdateLang();
	cout << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN);
	cout << XorStr("辅助加载完毕！") << endl;
	cout << XorStr("按下[INS]或[DEL]键显隐菜单.") << endl;
	cout << XorStr("按下[HOME]键隐藏本窗口.") << endl;
	cout << XorStr("Have fun...") << endl << endl;
	cout << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);

	try
	{
		Gui.AttachAnotherWindow(XorStr("Counter-Strike 2"), XorStr("SDL_app"), Cheats::Run);
	}
	catch (OSImGui::OSException& e)
	{
		try
		{
			// Perfect World version
			Gui.AttachAnotherWindow(XorStr("\u53cd\u6050\u7cbe\u82f1\uff1a\u5168\u7403\u653b\u52bf"), XorStr("SDL_app"), Cheats::Run);
		}
		catch (OSImGui::OSException& e)
		{
			cout << e.what() << endl;
		}
	}
}

int main(void)
{
	Cheat();
	return 0;
}

//junk code example

class ebptuih {
public:
	string fnfajpg;
	bool kkyshxlpqsqoub;
	bool gduqkpgbnsxjpsl;
	double qbzdfxa;
	ebptuih();
	bool znrmwqayabrvarfiw(string nrnfqolf, double toxpir, bool sabvrfgjyqvi, double afhss);
	void ymryjbajxfp(string qkvsm, double gunaabrj, string izpcrqp, bool zaxnmgpltmke, string xwwvdhkeimcb, string gqfoxi, int sclozmfvgaaml, int sdvxsjgcgtex, double vuagbzvte);
	void cfivktipmwqlfb(double xbmezj, bool jqfwyfypgbd, bool gzecczwp);
	void iujhvnqfxghcmp(string rhogvmixyiizovo);
	string pwihnpjgfw(double mqqeousli, string naktdaucyqwah, bool fptygdyf, bool refojhhijciup, int hixnq, double wmdwn, bool fxtokfxdzcc);
	bool fchgcdqvulnnkgnlakewqkzu(bool zatjjxxevbaefp, int ktyvszyjdlleoxl, double typlipntsfpva, int sbqsbbvhji, bool txilungyrny, bool caxwqttrrzonh, double rkuwefvbl, int rdson, bool xcejqowggqddb);
	string fncpivawvfptwrwvjx(int qrkhjtplfkaf, bool yqljsuzpl, bool iahactzd);

protected:
	bool nadrosdindhj;
	double wscgxns;
	string wfpfvslmbez;
	double bwngvspopdi;
	bool teqczs;

	void ubntqxvlywbgwqvzzzi(string pllqzcsn, bool onfhgk, int uiwtsdsldqqrwf, bool xmnvvuagxgq);

private:
	double trmukbw;
	string wrtylcvdybxa;

	string wkwcumxngsdtqkwdlvbhxd(bool ubzgxeeqbo, int zwdodidvhb, bool zzhqhlbvfyfv, int yzwpiwgeeaza);
	int uetnpyavtprhpuh(int ubzdil, double ljlbqcgquxfwg);
	void zuwroaqgvezrsinxzzlyceqse(string uwqrycps, string ttjhwwp, int susxdrq, int ubzval, string cojouymspmgshv, int heeljpyaeso);
	double pwgkbsdtxqbm(double mlvdsgg, int wgbsm, bool amrcdxuxnggx, int ghpspd);

};


string ebptuih::wkwcumxngsdtqkwdlvbhxd(bool ubzgxeeqbo, int zwdodidvhb, bool zzhqhlbvfyfv, int yzwpiwgeeaza) {
	double lukphxvjujny = 1406;
	int pttwtexhzdq = 1116;
	double ksliphaupzdfr = 73237;
	double brbthyfgoogpyu = 20830;
	int lkwbhdsu = 2545;
	if (1116 != 1116) {
		int gkgynghi;
		for (gkgynghi = 16; gkgynghi > 0; gkgynghi--) {
			continue;
		}
	}
	if (1116 == 1116) {
		int obuuz;
		for (obuuz = 24; obuuz > 0; obuuz--) {
			continue;
		}
	}
	if (73237 != 73237) {
		int zbtuogj;
		for (zbtuogj = 30; zbtuogj > 0; zbtuogj--) {
			continue;
		}
	}
	if (2545 == 2545) {
		int hszueigy;
		for (hszueigy = 31; hszueigy > 0; hszueigy--) {
			continue;
		}
	}
	return string("");
}

int ebptuih::uetnpyavtprhpuh(int ubzdil, double ljlbqcgquxfwg) {
	int gahuaeaicyvwbxf = 1061;
	string mumnn = "gwiclmkxtmiisyxqranckecscftyvgbazylcehgibwmrhtrdzdfhykmia";
	bool vamjk = false;
	double qwulqvjjjzyavc = 68110;
	int labxjeuundtlrg = 3877;
	double ijyjamaqralijps = 35917;
	string pojwkqw = "sakhubtbsiwejzoyhelrovdjumzwrniqvudswquy";
	string vqgumetnyzhiy = "mwvvzyldqiayvhuspbxtomukmiaerihvuaardcwgnealu";
	bool ouunkulcr = true;
	int kpush = 4067;
	if (1061 == 1061) {
		int inpqauxq;
		for (inpqauxq = 6; inpqauxq > 0; inpqauxq--) {
			continue;
		}
	}
	if (1061 != 1061) {
		int bgzukqc;
		for (bgzukqc = 73; bgzukqc > 0; bgzukqc--) {
			continue;
		}
	}
	if (false != false) {
		int zp;
		for (zp = 32; zp > 0; zp--) {
			continue;
		}
	}
	if (4067 != 4067) {
		int qrfqibm;
		for (qrfqibm = 52; qrfqibm > 0; qrfqibm--) {
			continue;
		}
	}
	if (68110 == 68110) {
		int xnpbkicqas;
		for (xnpbkicqas = 68; xnpbkicqas > 0; xnpbkicqas--) {
			continue;
		}
	}
	return 3892;
}

void ebptuih::zuwroaqgvezrsinxzzlyceqse(string uwqrycps, string ttjhwwp, int susxdrq, int ubzval, string cojouymspmgshv, int heeljpyaeso) {
	double ytslwcuyb = 39509;
	bool xvkhvdhvejz = true;
	int dofntdrwgaq = 3981;
	double bezcbslsxm = 16623;
	double pkkpjjtdysvjwin = 24946;
	double azmoygndqagj = 21266;
	bool xvyymtt = true;
	if (21266 != 21266) {
		int vdxbspjpp;
		for (vdxbspjpp = 38; vdxbspjpp > 0; vdxbspjpp--) {
			continue;
		}
	}
	if (3981 != 3981) {
		int ipmcdvt;
		for (ipmcdvt = 83; ipmcdvt > 0; ipmcdvt--) {
			continue;
		}
	}

}

double ebptuih::pwgkbsdtxqbm(double mlvdsgg, int wgbsm, bool amrcdxuxnggx, int ghpspd) {
	double gfkythdb = 18116;
	string bhgmnkgl = "jqgywcacpjzhpfaxdozubboraazlcjtvlherglytuuaoqqxqghrfu";
	double obshsk = 79784;
	bool bpagjg = true;
	double eczpybgcd = 12971;
	double zjnlkiwrtzzap = 940;
	double ibaezldhrja = 36599;
	double xnrwpuwnhdrodlg = 42581;
	string slrjrgk = "asdqpmpubrtveahsuhddusjiegpkoykyzffuvxhmoxetmslfspxeadsl";
	if (12971 == 12971) {
		int uteplkcjqf;
		for (uteplkcjqf = 81; uteplkcjqf > 0; uteplkcjqf--) {
			continue;
		}
	}
	if (18116 == 18116) {
		int hemtoca;
		for (hemtoca = 41; hemtoca > 0; hemtoca--) {
			continue;
		}
	}
	return 93484;
}

void ebptuih::ubntqxvlywbgwqvzzzi(string pllqzcsn, bool onfhgk, int uiwtsdsldqqrwf, bool xmnvvuagxgq) {
	double xbdfnlia = 38400;
	string bybucu = "wegawwbuuznkjvrzrzioviitvdheuuepfuuulflsdvekhdduykrcqaepouupgbaf";
	bool yfmxhlymymltkxl = false;
	int aqupxrf = 1272;
	double vrrmj = 14149;
	string kgjbh = "joaryldaocbzleuxzwlcpauebwwyvtehgdusfdmtryv";
	bool wxkmuvovchbarm = true;
	bool ygshxczpqaq = false;
	double acotasimriork = 15509;
	double vegmvxulgkjaq = 16539;

}

bool ebptuih::znrmwqayabrvarfiw(string nrnfqolf, double toxpir, bool sabvrfgjyqvi, double afhss) {
	int ahkdqa = 5989;
	if (5989 != 5989) {
		int tsiemt;
		for (tsiemt = 45; tsiemt > 0; tsiemt--) {
			continue;
		}
	}
	if (5989 == 5989) {
		int fyiv;
		for (fyiv = 73; fyiv > 0; fyiv--) {
			continue;
		}
	}
	if (5989 != 5989) {
		int zrb;
		for (zrb = 37; zrb > 0; zrb--) {
			continue;
		}
	}
	if (5989 == 5989) {
		int fgxdrrruj;
		for (fgxdrrruj = 73; fgxdrrruj > 0; fgxdrrruj--) {
			continue;
		}
	}
	if (5989 != 5989) {
		int tswcu;
		for (tswcu = 57; tswcu > 0; tswcu--) {
			continue;
		}
	}
	return true;
}

void ebptuih::ymryjbajxfp(string qkvsm, double gunaabrj, string izpcrqp, bool zaxnmgpltmke, string xwwvdhkeimcb, string gqfoxi, int sclozmfvgaaml, int sdvxsjgcgtex, double vuagbzvte) {
	double qhhwzitm = 34405;
	double lucuipsxlvkaspf = 14348;
	string fdcnyocp = "qlvmwdhgxibgthfr";
	bool lzdwcxbua = false;
	bool amwsi = false;
	string asvkovizelxu = "qibhijpgxhvwvzfxjqtjsmuhmsjuphsqsrysvtwlzxzegzydvfhifsblzlufovzrxeztuengjsqsdvotblhdhyfimgqscjaw";
	double ktqeudvcb = 10393;
	string anthagrggl = "vtizbnopxhqx";
	bool ahkbpccnesepvn = true;
	bool agremggimw = true;
	if (string("qibhijpgxhvwvzfxjqtjsmuhmsjuphsqsrysvtwlzxzegzydvfhifsblzlufovzrxeztuengjsqsdvotblhdhyfimgqscjaw") != string("qibhijpgxhvwvzfxjqtjsmuhmsjuphsqsrysvtwlzxzegzydvfhifsblzlufovzrxeztuengjsqsdvotblhdhyfimgqscjaw")) {
		int ovupv;
		for (ovupv = 47; ovupv > 0; ovupv--) {
			continue;
		}
	}

}

void ebptuih::cfivktipmwqlfb(double xbmezj, bool jqfwyfypgbd, bool gzecczwp) {
	int jukknyluf = 3043;
	bool wmvhsrakxmgtmvm = false;
	int mhhqboottwnph = 6062;
	string kpbmtobwbwn = "dcpsqkuaujazoezekmifacjpknglxbyu";
	bool aobouutpm = true;
	bool lgezxvs = true;
	double pqwhflwatjxk = 33437;
	if (6062 != 6062) {
		int zb;
		for (zb = 9; zb > 0; zb--) {
			continue;
		}
	}
	if (6062 != 6062) {
		int extkvvdxd;
		for (extkvvdxd = 15; extkvvdxd > 0; extkvvdxd--) {
			continue;
		}
	}

}

void ebptuih::iujhvnqfxghcmp(string rhogvmixyiizovo) {
	string yshrg = "pwidykcqnoqbgmmrsmrytuywggfyeyhjzjqjaphsrtsdgdpaaxwvcjdokswvhukdmncgyvkrufeyukrikasozbyf";
	int tkcvgdma = 339;
	string nyfslihspgimmb = "kyshp";
	int ymbcqegn = 1724;
	int jprla = 1269;
	double fiyvgwiygisqu = 14366;
	if (1269 != 1269) {
		int lkabvzcgd;
		for (lkabvzcgd = 70; lkabvzcgd > 0; lkabvzcgd--) {
			continue;
		}
	}

}

string ebptuih::pwihnpjgfw(double mqqeousli, string naktdaucyqwah, bool fptygdyf, bool refojhhijciup, int hixnq, double wmdwn, bool fxtokfxdzcc) {
	string uxfxavzwxrwsyim = "lwnnlhnwsuklhvwibkijf";
	double owtbkwbpnngbi = 8082;
	int hiqprvoapzj = 1271;
	int mizcrgtcvzhxdsa = 2299;
	string xhttejrssgjaw = "rqfdpeblfxjuxadvbxeodtlhdgqjbgzfutgysbrdjvyywrvapofqvkqqojvldexzbshhdrgv";
	int qkvbzd = 7689;
	string shpdbb = "gdsuzjswxje";
	double hzylusnctirny = 23161;
	int jlipzenhkkilw = 7404;
	int qupmiymubple = 8366;
	if (23161 != 23161) {
		int uv;
		for (uv = 21; uv > 0; uv--) {
			continue;
		}
	}
	return string("sq");
}

bool ebptuih::fchgcdqvulnnkgnlakewqkzu(bool zatjjxxevbaefp, int ktyvszyjdlleoxl, double typlipntsfpva, int sbqsbbvhji, bool txilungyrny, bool caxwqttrrzonh, double rkuwefvbl, int rdson, bool xcejqowggqddb) {
	string osofiryxgpr = "tsbhdqsrajtkqcdhkjlgycrtpocjbxqstte";
	double mkjws = 53514;
	bool zcbtxqyooplqp = true;
	double ujdiufzfdgtaj = 26257;
	double srbazksev = 23098;
	string eikouwgvepqmsl = "ujsdjfhalvjughvfburwznptqfqrhdbrjlkjkdzpoibaqxldoqnfbgozdajpyyzvfoolmegvghmofdg";
	if (23098 == 23098) {
		int hinqf;
		for (hinqf = 15; hinqf > 0; hinqf--) {
			continue;
		}
	}
	if (23098 == 23098) {
		int mxgefte;
		for (mxgefte = 50; mxgefte > 0; mxgefte--) {
			continue;
		}
	}
	if (53514 != 53514) {
		int apvbt;
		for (apvbt = 14; apvbt > 0; apvbt--) {
			continue;
		}
	}
	if (23098 != 23098) {
		int ribxwy;
		for (ribxwy = 31; ribxwy > 0; ribxwy--) {
			continue;
		}
	}
	return true;
}

string ebptuih::fncpivawvfptwrwvjx(int qrkhjtplfkaf, bool yqljsuzpl, bool iahactzd) {
	int belltrte = 8438;
	if (8438 == 8438) {
		int muukt;
		for (muukt = 54; muukt > 0; muukt--) {
			continue;
		}
	}
	if (8438 == 8438) {
		int fuxlft;
		for (fuxlft = 22; fuxlft > 0; fuxlft--) {
			continue;
		}
	}
	if (8438 != 8438) {
		int qlmu;
		for (qlmu = 23; qlmu > 0; qlmu--) {
			continue;
		}
	}
	return string("smurmx");
}

ebptuih::ebptuih() {
	this->znrmwqayabrvarfiw(string("onkrkmujecnhjagrhexfkcksyeflpulxunoejocphjxlofthbzgtyybqlnentcllwqsdqhn"), 17472, true, 17410);
	this->ymryjbajxfp(string("duhlwbybgdavmsdvefjuvtwfyfudjlkzixxzhcvbyizvoruqeqdzbmrgfplzzeekcadofwjpruwpeapdyakz"), 22144, string("fvjffwqeziqiqjtoaquvqcqaxfgwnvenpchupzrkxjsgaaaoazpsqkrnhalzeeinoihaitxtlkzhx"), false, string("zucwyvjlflrbrgfnvacjgagvyceixfhilutsgmwluyjelbgyydyzbmdiodfpncmhxnropajppimtbmfyfpdynbhwns"), string("ezonhxmiubyscczlyaojpfhtlllzcpupcaxfiemeapxljrjrsanjjfajmmasgpolwqk"), 1516, 6265, 13270);
	this->cfivktipmwqlfb(66814, true, true);
	this->iujhvnqfxghcmp(string("xeutbtisgzscpdxyfpnoiesnpfps"));
	this->pwihnpjgfw(24240, string("kzzkomanbpyglrwgcscvzmngjclrdqettvrwvolqyeywnmodtnjefoyvgshzoenhtneztqmexivkdvbsswvscqcairfbctse"), false, true, 2866, 5243, true);
	this->fchgcdqvulnnkgnlakewqkzu(false, 692, 64919, 1684, true, true, 59470, 623, true);
	this->fncpivawvfptwrwvjx(3057, false, false);
	this->ubntqxvlywbgwqvzzzi(string("dkfyvkzjawpalfunnzamnsdddonnjgdnwksjedotmz"), true, 1879, false);
	this->wkwcumxngsdtqkwdlvbhxd(false, 2355, false, 1329);
	this->uetnpyavtprhpuh(1020, 20235);
	this->zuwroaqgvezrsinxzzlyceqse(string("ferhcuihzjidwrmsfcqhrferskooovlp"), string("asvktysisaqpjzwuqdqlohcrvatknwzdnix"), 2517, 3619, string("sbtotmjdjkyayerzzxotkbogudl"), 2891);
	this->pwgkbsdtxqbm(70964, 937, false, 1029);
}
